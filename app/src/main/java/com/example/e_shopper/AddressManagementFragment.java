package com.example.e_shopper;

import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentTransaction;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.google.android.material.textview.MaterialTextView;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.QueryDocumentSnapshot;

import java.util.ArrayList;
import java.util.List;

public class AddressManagementFragment extends Fragment implements AddressAdapter.OnAddressActionListener {

    private static final String TAG = "AddressManagement";
    private FloatingActionButton fabAddAddress;
    private RecyclerView recyclerView;
    private AddressAdapter addressAdapter;
    private List<Address> addressList;
    private FirebaseFirestore firestore;
    private MaterialTextView addressHeadingTextView;

    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View rootView = inflater.inflate(R.layout.fragment_address_management, container, false);
        firestore = FirebaseFirestore.getInstance();
        initializeViews(rootView);
        fetchAddresses();
        return rootView;
    }

    private void initializeViews(View rootView) {
        addressHeadingTextView = rootView.findViewById(R.id.addressHeadingTextView);
        recyclerView = rootView.findViewById(R.id.recyclerView);
        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));

        addressList = new ArrayList<>();
        addressAdapter = new AddressAdapter(addressList, this);
        recyclerView.setAdapter(addressAdapter);

        fabAddAddress = rootView.findViewById(R.id.fabAddAddress);
        fabAddAddress.setOnClickListener(v -> openAddNewAddressFragment());
    }

    private void fetchAddresses() {
        FirebaseUser currentUser = FirebaseAuth.getInstance().getCurrentUser();
        if (currentUser == null) {
            Log.e(TAG, "No user logged in");
            return;
        }

        String currentUserId = currentUser.getUid();
        Log.d(TAG, "Fetching addresses for user: " + currentUserId);

        firestore.collection("users").document(currentUserId).collection("addresses")
                .get()
                .addOnSuccessListener(queryDocumentSnapshots -> {
                    addressList.clear();
                    for (QueryDocumentSnapshot document : queryDocumentSnapshots) {
                        Address address = document.toObject(Address.class);
                        addressList.add(address);
                        Log.d(TAG, "Added address: " + address.getAddressLine1());
                    }
                    addressHeadingTextView.setText(String.format("My Addresses (%d)", addressList.size()));
                    addressAdapter.notifyDataSetChanged();
                })
                .addOnFailureListener(e -> {
                    Log.e(TAG, "Error fetching addresses", e);
                    Toast.makeText(getContext(), "Failed to fetch addresses: " + e.getMessage(), Toast.LENGTH_SHORT).show();
                });
    }

    private void openAddNewAddressFragment() {
        FragmentTransaction transaction = requireActivity().getSupportFragmentManager().beginTransaction();
        transaction.replace(R.id.fragment_container, new AddNewAddressFragment());
        transaction.addToBackStack(null);
        transaction.commit();
    }

    @Override
    public void onDeleteAddress(Address address) {
        // Use the document ID (which is auto-generated by Firestore when adding an address)
        firestore.collection("users").document(address.getUserId())
                .collection("addresses").document(address.getUserId() + "-" + address.getAddressLine1()) // This should be your document ID
                .delete()
                .addOnSuccessListener(aVoid -> {
                    Toast.makeText(getContext(), "Address Deleted", Toast.LENGTH_SHORT).show();
                    fetchAddresses(); // Refresh the address list
                })
                .addOnFailureListener(e -> {
                    Log.e(TAG, "Error deleting address", e);
                    Toast.makeText(getContext(), "Delete Failed: " + e.getMessage(), Toast.LENGTH_SHORT).show();
                });
    }


    @Override
    public void onSetDefaultAddress(Address address) {
        Toast.makeText(getContext(), "Default Address Set (Not yet implemented)", Toast.LENGTH_SHORT).show();
    }

    public static class Address {
        private String userId, addressLine1, name, city, state, country, postcode;

        public Address() {}

        public String getUserId() { return userId; }
        public String getAddressLine1() { return addressLine1; }
        public String getName() { return name; }
        public String getCity() { return city; }
        public String getState() { return state; }
        public String getCountry() { return country; }
        public String getPostcode() { return postcode; }
    }
}
